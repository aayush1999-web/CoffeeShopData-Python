#!/usr/bin/env python# coding: utf-8# In[34]:#Aayush Kharel#https://joecoelhosj.github.io/tutorial/simpy-example/#Used this website as our reference. #Packagesimport simpyimport randomimport numpy#Test ConstrantsAMOUNT_OF_CUSTOMERS = 25                      AMOUNT_OF_CASHIERS = 2AMOUNT_OF_BARISTAS = 3#Items on menu for this coffee shop# Menu used from the website as wellMenu = {1:["Regular Coffee",10,15],        2:["Latte",30,45],         3:["Mocha",30,45],         4:["Cold Brew",10,20],         5:["Frappe",50,70],         6:["Espresso",20,35]}#The time each payment method requires to processPayment = {1:["Cash",15,30],            2:["Card",10,20]}#List to hold the time until a cashier is available, time taken to make payment, time until the barista is free # And time used to prepare the order.Payment_Wait_Time = []Payment_Time = []Order_Wait_Time = []Order_Time = []         #How we Generated customersdef generate_customer (env, cashier, barista): #It waits 1 - 25 seconds before generating a customers    for i in range(AMOUNT_OF_CUSTOMERS):        yield env.timeout(random.randint(1,25)) #function calls which returns a number between 1 and 25 using uniform distribution        env.process(simulation(env, i, cashier, barista))#Created the environment def simulation (env, name, cashier, barista):        #Prints out customer number as well as arrival time    print("> Customer %s arrived at time %.1f" % (name, env.now))       with cashier.request() as req:        start_cashier_que = env.now # returns current time in seconds        yield req        Payment_Wait_Time.append(env.now-start_cashier_que)        menu_item = random.randint(1,6)        payment_type = random.randint(1,2)        time_to_order = random.randint(Payment[payment_type][1], Payment[payment_type][2]) #Generating random number of payment by cash or card.        payment_name = Payment[payment_type][0]        yield env.timeout(time_to_order) #Timeout event to prepare the order        print("> >Customer %s finished paying by %s in %.1f seconds" % (name, payment_name, env.now-start_cashier_que))        Payment_Time.append(env.now-start_cashier_que)            with barista.request() as req:        start_barista_que = env.now        yield req        Order_Wait_Time.append(env.now-start_barista_que)                time_to_prepare = random.randint(Menu[menu_item][1], Menu[menu_item][2])        item_name = Menu[menu_item][0]        yield env.timeout(time_to_prepare)        print(">> > Customer %s served %s in %.1f seconds" % (name, item_name, env.now-start_cashier_que))        Order_Time.append(env.now-start_cashier_que)#Creates simulation enviornmentenv = simpy.Environment()cashier = simpy.Resource(env, AMOUNT_OF_CASHIERS)barista = simpy.Resource(env, AMOUNT_OF_BARISTAS)env.process(generate_customer(env, cashier, barista))env.run(until=400)print("\n\nWITH %s CASHIERS and %s BARISTAS and %s CONTINUOUSLY ARRIVING CUSTOMERS" % (AMOUNT_OF_CASHIERS, AMOUNT_OF_BARISTAS, AMOUNT_OF_CUSTOMERS))print("Average wait time for order queue: %.1f seconds." % (numpy.mean(Payment_Wait_Time)))print("Average wait time until the payment is made: %.1f seconds." % (numpy.mean(Payment_Time)))print("Average wait time in order queue: %.1f seconds." % (numpy.mean(Order_Wait_Time)))print("Average time until order is finished: %.1f seconds." % (numpy.mean(Order_Time)))